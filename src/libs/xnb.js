function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

const WorkerFactory = createBase64WorkerFactory('', null, false);
/* eslint-enable */

class XnbData {
	constructor(header, readers, content) {
		let {
			target,
			formatVersion,
			hidef,
			compressed
		} = header;
		this.header = {
			target,
			formatVersion,
			hidef,
			compressed
		};
		this.readers = readers;
		this.content = content;
	}

	get target() {
		var _this$header;

		switch ((_this$header = this.header) === null || _this$header === void 0 ? void 0 : _this$header.target) {
			case 'w':
				return "Microsoft Windows";

			case 'm':
				return "Windows Phone 7";

			case 'x':
				return "Xbox 360";

			case 'a':
				return "Android";

			case 'i':
				return "iOS";

			default:
				return "Unknown";
		}
	}

	get formatVersion() {
		var _this$header2;

		switch ((_this$header2 = this.header) === null || _this$header2 === void 0 ? void 0 : _this$header2.formatVersion) {
			case 0x3:
				return "XNA Game Studio 3.0";

			case 0x4:
				return "XNA Game Studio 3.1";

			case 0x5:
				return "XNA Game Studio 4.0";

			default:
				return "Unknown";
		}
	}

	get hidef() {
		var _this$header3;

		return !!((_this$header3 = this.header) !== null && _this$header3 !== void 0 && _this$header3.hidef);
	}

	get compressed() {
		var _this$header4;

		return !!((_this$header4 = this.header) !== null && _this$header4 !== void 0 && _this$header4.compressed);
	}

	get contentType() {
		let {
			export: raw
		} = this.content;
		if (raw !== undefined) return raw.type;
		return "JSON";
	}

	get rawContent() {
		let {
			export: raw
		} = this.content;
		if (raw !== undefined) return raw.data;
		return JSON.stringify(this.content, (key, value) => {
			if (key === "export") return value.type;
			return value;
		}, 4);
	}

	stringify() {
		return JSON.stringify({
			header: this.header,
			readers: this.readers,
			content: this.content
		}, null, 4);
	}

	toString() {
		return this.stringify();
	}

}

class XnbContent {
	constructor(data, type) {
		this.type = type;
		this.content = data;
	}
}

function workerPromise(worker, sendData)
{
	return new Promise( (resolve, reject)=>{
		worker.postMessage(sendData);
		worker.addEventListener("message", (e)=>resolve(e.data));
		worker.addEventListener("error", (e)=>reject(e.message));
	});
}

const bufferToXnb = function(data)
{
	const worker = new WorkerFactory();
	return workerPromise(worker, {type:"bufferToXnb", data}).
		then( ( {header, readers, content} )=>new XnbData(header, readers, content) );
};

const xnbDataToContent = function(data)
{
	const worker = new WorkerFactory();
	return workerPromise(worker, {type:"xnbDataToContent", data})
		.then( ( {content, type} )=>new XnbContent(content, type) );
};

export { bufferToXnb, xnbDataToContent };
